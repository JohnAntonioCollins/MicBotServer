TODO: make python contained in project with relative path, or replace with Java.

import com.pi4j.io.gpio.GpioController;
import com.pi4j.io.gpio.GpioFactory;
import com.pi4j.io.gpio.GpioPin;
import com.pi4j.io.gpio.GpioPinDigitalInput;
import com.pi4j.io.gpio.GpioPinDigitalOutput;
import com.pi4j.io.gpio.PinDirection;
import com.pi4j.io.gpio.PinMode;
import com.pi4j.io.gpio.PinPullResistance;
import com.pi4j.io.gpio.PinState;
import com.pi4j.io.gpio.RaspiPin;
import com.pi4j.io.gpio.trigger.GpioCallbackTrigger;
import com.pi4j.io.gpio.trigger.GpioPulseStateTrigger;
import com.pi4j.io.gpio.trigger.GpioSetStateTrigger;
import com.pi4j.io.gpio.trigger.GpioSyncStateTrigger;
import com.pi4j.io.gpio.event.GpioPinListener;
import com.pi4j.io.gpio.event.GpioPinDigitalStateChangeEvent;
import com.pi4j.io.gpio.event.GpioPinEvent;
import com.pi4j.io.gpio.event.GpioPinListenerDigital;
import com.pi4j.io.gpio.event.PinEventType;



Raspberry Pi 2 - Model B (Revision 1.1) -old loaner zip code R'Pi
Raspberry Pi 3 - current

pinouts:
http://pi4j.com/pins/model-b-rev1.html
https://pinout.xyz/pinout/wiringpi


<build>
 <plugins>
 <plugin>
 <artifactId>maven-assembly-plugin</artifactId>
 <version>2.5.1</version>
 <configuration>
 <archive>
 <manifest>
 <mainClass>de.buschbaum.java.pathfinder.Main</mainClass>
 </manifest>
 </archive>
 <descriptorRefs>
 <descriptorRef>jar-with-dependencies</descriptorRef>
 </descriptorRefs>
 </configuration>
 </plugin>
 </plugins>
 </build>

my Java from MicbotCamera to try to stream video
/*    BufferedImage myImage;
    byte[] myImageAsByte;

    public byte[] serveMyImage()
    {
        try
        {
            // Invoke raspistill to take the photo.
            Process process = Runtime.getRuntime().exec("raspistill -n -vf -o /home/pi/TEST-01.jpg");
            myImage = ImageIO.read(new File("/home/pi/TEST-01.jpg"));
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            ImageIO.write(myImage, "jpg", baos);
            byte[] myImageAsByte = baos.toByteArray();
            return myImageAsByte;

        } catch (java.io.IOException e)
        {
            System.out.println("caught java.io.IOException");
        }
        return myImageAsByte;
    }*/

 my Java from MicBotRESTcontroller to try to stream video
 /*   TESTING METHOD NOW SHOULD GET ONE STILL ONCE
     @RequestMapping(value = "/getImage", method = RequestMethod.GET)
     public ResponseEntity<byte[]> getImage()
     {
         byte[] image = cameraStreamer.serveMyImage();
         return ResponseEntity.ok().contentType(MediaType.IMAGE_JPEG).body(image);
     }*/